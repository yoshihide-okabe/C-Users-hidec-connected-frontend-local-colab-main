"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { PlusCircle, Bell, MessageSquare, Trophy, TagIcon } from "lucide-react";
import { MobileNav } from "@/components/mobile-nav";
import { ProjectList, Project } from "@/components/project-list";
import { useToast } from "@/hooks/use-toast";
import { getRecentProjects, getFavoriteProjects } from "@/services/project";

// ランキングに基づいた色を取得する関数
function getRankColor(rank: number) {
  const colors: Record<number, string> = {
    1: "bg-yellow-500",
    2: "bg-gray-400",
    3: "bg-amber-600",
  };

  return colors[rank] || "bg-lightgreen-500";
}

export default function HomePage() {
  const router = useRouter();
  const { toast } = useToast();
  const [selectedProject, setSelectedProject] = useState<Project | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // ログイン状態をチェックして未ログインの場合にログインページに遷移
  useEffect(() => {
    const checkAuthAndLoadData = async () => {
      setIsLoading(true);

      // ログイン状態確認
      const isLoggedIn =
        localStorage.getItem("isLoggedIn") === "true" ||
        localStorage.getItem("token") !== null;

      if (!isLoggedIn) {
        router.push("/login"); // ログインしていない場合はログインページにリダイレクト
        return;
      }

      // 保存されたプロジェクト情報を復元
      const savedProjectId = localStorage.getItem("selectedProjectId");
      if (savedProjectId) {
        try {
          const projectId = parseInt(savedProjectId);
          const projectTitle =
            localStorage.getItem("selectedProjectTitle") || "";
          const projectDescription =
            localStorage.getItem("selectedProjectDescription") || "";
          const projectOwner =
            localStorage.getItem("selectedProjectOwner") || "オーナー情報なし";

          // 保存されていた情報からプロジェクトオブジェクトを再構築
          setSelectedProject({
            id: projectId,
            title: projectTitle,
            description: projectDescription,
            owner: projectOwner,
            // その他必要なフィールドにはデフォルト値を設定
            status: "active",
            category: "その他",
            createdAt: new Date().toISOString(),
          });

          console.log("Restored project from localStorage:", {
            id: projectId,
            title: projectTitle,
            description: projectDescription,
          });
        } catch (error) {
          console.error("Failed to restore project from localStorage:", error);
        }
      }

      setIsLoading(false);
    };

    checkAuthAndLoadData();
  }, [router]);

  // プロジェクト選択時の処理
  const handleProjectSelect = (project: Project) => {
    console.log("Project selected:", project);

    setSelectedProject(project);

    // ローカルストレージに保存
    try {
      localStorage.setItem("selectedProjectId", project.id.toString());
      localStorage.setItem("selectedProjectTitle", project.title);
      localStorage.setItem("selectedProjectDescription", project.description);
      localStorage.setItem("selectedProjectOwner", project.owner);

      console.log("Project saved to localStorage", {
        id: project.id.toString(),
        title: project.title,
        description: project.description,
      });

      // 選択通知
      toast({
        title: "プロジェクト選択",
        description: `「${project.title}」を選択しました`,
      });
    } catch (error) {
      console.error("Failed to save project to localStorage:", error);
      toast({
        title: "エラー",
        description: "プロジェクト情報の保存に失敗しました",
        variant: "destructive",
      });
    }
  };

  if (isLoading) {
    return (
      <div className="h-screen flex items-center justify-center bg-gradient-to-b from-lightgreen-50 to-white">
        <div className="animate-pulse text-lightgreen-700">読み込み中...</div>
      </div>
    );
  }

  return (
    <div className="pb-20 bg-gradient-to-b from-lightgreen-50 to-white">
      <header className="sticky top-0 z-20 bg-white/95 backdrop-blur-md border-b border-lightgreen-200 px-5 py-4 shadow-sm">
        <div className="flex items-center justify-between">
          <h1 className="text-xl font-bold text-lightgreen-800">
            共創プラットフォーム
          </h1>
          <div className="flex items-center gap-3">
            <Button
              variant="ghost"
              size="icon"
              className="text-lightgreen-600 hover:text-lightgreen-700 hover:bg-lightgreen-100 h-10 w-10"
            >
              <Bell className="h-6 w-6" />
            </Button>
            <Button
              variant="ghost"
              size="icon"
              className="rounded-full overflow-hidden border-2 border-lightgreen-200 p-0 h-10 w-10"
            >
              <div className="h-10 w-10 bg-orange-500 text-white font-semibold flex items-center justify-center">
                キ
              </div>
            </Button>
          </div>
        </div>
      </header>

      {/* 選択中のプロジェクト - スティッキーポジション */}
      {selectedProject && (
        <div className="sticky top-[72px] z-10 bg-white/95 backdrop-blur-sm border-b border-lightgreen-200 shadow-sm px-5 py-2">
          <div className="flex items-center">
            <div className="bg-lightgreen-100 p-1 rounded-full mr-2">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-4 w-4 text-lightgreen-600"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              >
                <path d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z"></path>
                <path d="m9 12 2 2 4-4"></path>
              </svg>
            </div>
            <h2 className="text-sm font-bold text-lightgreen-800 mr-2">
              選択中のプロジェクト:
            </h2>
            <div className="flex items-center">
              <div className="h-5 w-5 rounded-full bg-amber-700 text-white flex items-center justify-center mr-2 text-xs">
                {selectedProject.owner.charAt(0)}
              </div>
              <div className="flex-1 min-w-0">
                <h3 className="font-medium text-sm text-lightgreen-800 truncate">
                  {selectedProject.title}
                </h3>
              </div>
            </div>
            <span className="ml-2 inline-block text-xs px-1.5 py-0.5 bg-lightgreen-100 text-lightgreen-700 rounded-full">
              {selectedProject.category}
            </span>
          </div>
        </div>
      )}

      <main className="px-5 py-6">
        <div className="mb-10">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-lightgreen-800 flex items-center">
              <div className="bg-lightgreen-100 p-1.5 rounded-full mr-2">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5 text-lightgreen-600"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <circle cx="12" cy="12" r="10"></circle>
                  <polyline points="12 6 12 12 16 14"></polyline>
                </svg>
              </div>
              新着プロジェクト
            </h2>
          </div>
          <ProjectList type="new" onSelectProject={handleProjectSelect} />
        </div>

        <div className="mb-10">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-lightgreen-800 flex items-center">
              <div className="bg-lightgreen-100 p-1.5 rounded-full mr-2">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5 text-lightgreen-600"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <path d="M12 5v1m0 12v1M5 12h1m12 0h1M6.5 6.5l.5.5m10 10l.5.5M6.5 17.5l.5-.5m10-10l.5-.5M12 8a4 4 0 1 0 0 8 4 4 0 0 0 0-8Z"></path>
                </svg>
              </div>
              お気に入りプロジェクト
            </h2>
          </div>
          <ProjectList type="favorite" onSelectProject={handleProjectSelect} />
        </div>

        <div className="space-y-6">
          <Link href="/troubles">
            <Button className="w-full bg-lightgreen-500 hover:bg-lightgreen-600 text-white rounded-xl shadow-md hover:shadow-lg transition-all py-5 text-lg font-medium">
              <MessageSquare className="mr-2 h-5 w-5" />
              お困りごとリスト
            </Button>
          </Link>

          <div className="rounded-xl border border-lightgreen-200 bg-white p-5 shadow-md overflow-hidden">
            <div className="flex items-center justify-between mb-4">
              <h3 className="font-semibold text-lightgreen-800 text-lg flex items-center">
                <div className="bg-lightgreen-100 p-1.5 rounded-full mr-2">
                  <Trophy className="h-5 w-5 text-lightgreen-600" />
                </div>
                アクティビティランキング
              </h3>
              <span className="text-xs text-lightgreen-600 bg-lightgreen-50 px-3 py-1.5 rounded-full font-medium">
                今週
              </span>
            </div>
            <div className="space-y-4">
              {[
                { name: "キツネ", points: 1250, rank: 1 },
                { name: "パンダ", points: 980, rank: 2 },
                { name: "ウサギ", points: 875, rank: 3 },
              ].map((user) => (
                <div
                  key={user.name}
                  className="flex items-center justify-between bg-gradient-to-r from-lightgreen-50 to-transparent p-3 rounded-lg hover:shadow-sm transition-all border border-lightgreen-100"
                >
                  <div className="flex items-center">
                    <div
                      className={`flex h-10 w-10 items-center justify-center rounded-full text-white font-medium mr-3 text-sm ${getRankColor(
                        user.rank
                      )}`}
                    >
                      {user.rank}
                    </div>
                    <div className="flex flex-col">
                      <span className="font-medium">{user.name}</span>
                      <div className="w-full bg-gray-200 rounded-full h-2 mt-1.5">
                        <div
                          className="bg-lightgreen-500 h-2 rounded-full"
                          style={{ width: `${(user.points / 1250) * 100}%` }}
                        ></div>
                      </div>
                    </div>
                  </div>
                  <span className="font-medium text-lightgreen-700 text-lg">
                    {user.points}pt
                  </span>
                </div>
              ))}
            </div>
          </div>

          <div className="rounded-xl border border-lightgreen-200 bg-white p-5 shadow-md">
            <h3 className="font-semibold text-lg mb-4 text-lightgreen-800 flex items-center">
              <div className="bg-lightgreen-100 p-1.5 rounded-full mr-2">
                <TagIcon className="h-5 w-5 text-lightgreen-600" />
              </div>
              カテゴリー
            </h3>
            <div className="flex flex-wrap gap-2">
              {[
                "テクノロジー",
                "デザイン",
                "マーケティング",
                "ビジネス",
                "教育",
              ].map((category) => (
                <Button
                  key={category}
                  variant="outline"
                  size="sm"
                  className="rounded-full text-sm h-9 border-lightgreen-300 bg-lightgreen-50 text-lightgreen-700 hover:bg-lightgreen-100 shadow-sm hover:shadow font-medium"
                >
                  {category}
                </Button>
              ))}
            </div>
          </div>
        </div>
      </main>

      <MobileNav />
    </div>
  );
}
